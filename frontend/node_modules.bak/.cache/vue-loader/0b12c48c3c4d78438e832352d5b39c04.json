{"remainingRequest":"/srv/repos/cables_ecom/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/srv/repos/cables_ecom/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/srv/repos/cables_ecom/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/srv/repos/cables_ecom/frontend/src/App.vue?vue&type=template&id=7ba5bd90&scoped=true&","dependencies":[{"path":"/srv/repos/cables_ecom/frontend/src/App.vue","mtime":1674766531564},{"path":"/srv/repos/cables_ecom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/srv/repos/cables_ecom/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/srv/repos/cables_ecom/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/srv/repos/cables_ecom/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}