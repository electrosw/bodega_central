{"remainingRequest":"/srv/repos/bodega_central/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/srv/repos/bodega_central/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/srv/repos/bodega_central/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/srv/repos/bodega_central/frontend/src/components/bodega/Ingreso.vue?vue&type=template&id=70af477a&scoped=true&","dependencies":[{"path":"/srv/repos/bodega_central/frontend/src/components/bodega/Ingreso.vue","mtime":1678131154655},{"path":"/srv/repos/bodega_central/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1676473588660},{"path":"/srv/repos/bodega_central/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1676473588036},{"path":"/srv/repos/bodega_central/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1676473588660},{"path":"/srv/repos/bodega_central/frontend/node_modules/vue-loader/lib/index.js","mtime":1676473588036}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}